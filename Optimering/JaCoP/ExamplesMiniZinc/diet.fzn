predicate jacop_knapsack(array [int] of int: w, array [int] of int: p, var int: W, var int: P, array [int] of var int: x);
var 0..100: INT____1 :: is_defined_var :: var_is_introduced;
array [1..4] of int: calories = [400, 200, 150, 500];
array [1..2] of int: chocolate = [3, 2];
array [1..4] of int: cost = [50, 20, 30, 80];
array [1..4] of int: fat = [2, 4, 1, 5];
var 500..1000: intake_calories;
var 6..1000: intake_chocolate;
var 8..1000: intake_fat;
var 10..1000: intake_sugar;
array [1..4] of var 0..10: items :: output_array([1..4]);
var 0..100: price :: output_var = INT____1;
var 0..100: price_part;
array [1..4] of int: sugar = [2, 2, 4, 4];
constraint int_lin_eq([-1, 1, 30, 80], [INT____1, price_part, items[3], items[4]], 0) :: defines_var(INT____1);
constraint jacop_knapsack(chocolate, [50, 20], intake_chocolate, price_part, [items[1], items[2]]);
constraint jacop_knapsack(calories, cost, intake_calories, price, items);
constraint jacop_knapsack(fat, cost, intake_fat, INT____1, items);
constraint jacop_knapsack(sugar, cost, intake_sugar, INT____1, items);
solve minimize INT____1;
